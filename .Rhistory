bias2 = sum((g_bar-f(x_lat))[-N_dx]^2*phi_x*dx)
bias2
# Calculate the variance for an appropriate H.
# This integration involves two steps.
ones = matrix(1,M,1)
var_x = colSums((G_D-ones %*% g_bar)^2)/M   # step 1
var  = sum(var_x[-N_dx]*phi_x*dx)           # step2
var
bias_var = function(N=2,order,M=1000,dx=1/1000){
M     = 1000
dx    = 1/100
x_lat = seq(-1,1,dx)
N_dx  = length(x_lat)
g_bar = rep(0,N_dx)
G_D = matrix(0,M,N_dx)
for (i in 1:M) {
res_data  = dgp(2,f)
res_model = lm(y~x,data=res_data)
g_D       =  predict(res_model,data.frame(x=x_lat))
g_bar     =  g_bar+g_D
G_D[i,]   = g_D
}
g_bar = g_bar/M
#plot(res_data,pch=16,type = 'n',cex=2,col="blue",xlim = c(-1,1), ylim = c(-1,1))
#xx = seq(-1,1,1/100)
#lines(f(xx)~xx,col='grey')
#lines(g_bar~x_lat,col='red',lwd=2)
phi_x = 0.5
bias2 = sum((g_bar-f(x_lat))[-N_dx]^2*phi_x*dx)
# Calculate the variance for an appropriate H.
# This integration involves two steps.
ones = matrix(1,M,1)
var_x = colSums((G_D-ones %*% g_bar)^2)/M   # step 1
var  = sum(var_x[-N_dx]*phi_x*dx)           # step2
ret = list(bias2=bias2,var=var,both=bias2+var)
return(ret)
}
bias_var = function(N=2,order,M=1000,dx=1/1000){
M     = 1000
dx    = 1/100
x_lat = seq(-1,1,dx)
N_dx  = length(x_lat)
g_bar = rep(0,N_dx)
G_D = matrix(0,M,N_dx)
for (i in 1:M) {
res_data  = dgp(N,f)
res_model = lm(y~x,data=res_data)
g_D       =  predict(res_model,data.frame(x=x_lat))
g_bar     =  g_bar+g_D
G_D[i,]   = g_D
}
g_bar = g_bar/M
#plot(res_data,pch=16,type = 'n',cex=2,col="blue",xlim = c(-1,1), ylim = c(-1,1))
#xx = seq(-1,1,1/100)
#lines(f(xx)~xx,col='grey')
#lines(g_bar~x_lat,col='red',lwd=2)
phi_x = 0.5
bias2 = sum((g_bar-f(x_lat))[-N_dx]^2*phi_x*dx)
# Calculate the variance for an appropriate H.
# This integration involves two steps.
ones = matrix(1,M,1)
var_x = colSums((G_D-ones %*% g_bar)^2)/M   # step 1
var  = sum(var_x[-N_dx]*phi_x*dx)           # step2
ret = list(bias2=bias2,var=var,both=bias2+var)
return(ret)
}
rbind(bias_var(N=2),
bias_var(N=3),
bias_var(N=4),
bias_var(N=2))
rbind(bias_var(N=2),
bias_var(N=3),
bias_var(N=4))
bias_var = function(N=2,order,M=1000,dx=1/1000){
M     = 1000
dx    = 1/100
x_lat = seq(-1,1,dx)
N_dx  = length(x_lat)
g_bar = rep(0,N_dx)
G_D = matrix(0,M,N_dx)
for (i in 1:M) {
res_data  = dgp(N,f)
res_model = lm(y~1,data=res_data)
g_D       =  predict(res_model,data.frame(x=x_lat))
g_bar     =  g_bar+g_D
G_D[i,]   = g_D
}
g_bar = g_bar/M
#plot(res_data,pch=16,type = 'n',cex=2,col="blue",xlim = c(-1,1), ylim = c(-1,1))
#xx = seq(-1,1,1/100)
#lines(f(xx)~xx,col='grey')
#lines(g_bar~x_lat,col='red',lwd=2)
phi_x = 0.5
bias2 = sum((g_bar-f(x_lat))[-N_dx]^2*phi_x*dx)
# Calculate the variance for an appropriate H.
# This integration involves two steps.
ones = matrix(1,M,1)
var_x = colSums((G_D-ones %*% g_bar)^2)/M   # step 1
var  = sum(var_x[-N_dx]*phi_x*dx)           # step2
ret = list(bias2=bias2,var=var,both=bias2+var)
return(ret)
}
rbind(bias_var(N=2),
bias_var(N=3),
bias_var(N=4))
bias_var = function(N=2,order,M=10000,dx=1/1000){
M     = 1000
dx    = 1/100
x_lat = seq(-1,1,dx)
N_dx  = length(x_lat)
g_bar = rep(0,N_dx)
G_D = matrix(0,M,N_dx)
for (i in 1:M) {
res_data  = dgp(N,f)
res_model = lm(y~1,data=res_data)
g_D       =  predict(res_model,data.frame(x=x_lat))
g_bar     =  g_bar+g_D
G_D[i,]   = g_D
}
g_bar = g_bar/M
#plot(res_data,pch=16,type = 'n',cex=2,col="blue",xlim = c(-1,1), ylim = c(-1,1))
#xx = seq(-1,1,1/100)
#lines(f(xx)~xx,col='grey')
#lines(g_bar~x_lat,col='red',lwd=2)
phi_x = 0.5
bias2 = sum((g_bar-f(x_lat))[-N_dx]^2*phi_x*dx)
# Calculate the variance for an appropriate H.
# This integration involves two steps.
ones = matrix(1,M,1)
var_x = colSums((G_D-ones %*% g_bar)^2)/M   # step 1
var  = sum(var_x[-N_dx]*phi_x*dx)           # step2
ret = list(bias2=bias2,var=var,both=bias2+var)
return(ret)
}
rbind(bias_var(N=2),
bias_var(N=3),
bias_var(N=4))
rbind(bias_var(N=3),
bias_var(N=4),
bias_var(N=5))
bias_var = function(N=2,order = 1,M=10000,dx=1/1000){
M     = 1000
dx    = 1/100
x_lat = seq(-1,1,dx)
N_dx  = length(x_lat)
g_bar = rep(0,N_dx)
G_D = matrix(0,M,N_dx)
for (i in 1:M) {
res_data  = dgp(N,f)
res_model = lm(y~poly(x,order),data=res_data)
g_D       =  predict(res_model,data.frame(x=x_lat))
g_bar     =  g_bar+g_D
G_D[i,]   = g_D
}
g_bar = g_bar/M
phi_x = 0.5
bias2 = sum((g_bar-f(x_lat))[-N_dx]^2*phi_x*dx)
# Calculate the variance for an appropriate H.
# This integration involves two steps.
ones = matrix(1,M,1)
var_x = colSums((G_D-ones %*% g_bar)^2)/M   # step 1
var  = sum(var_x[-N_dx]*phi_x*dx)           # step2
ret = list(bias2=bias2,var=var,both=bias2+var)
return(ret)
}
rbind(bias_var(N=3),
bias_var(N=4),
bias_var(N=5))
rbind(bias_var(N=3,order = 2),
bias_var(N=4,order =2),
bias_var(N=5,order = 2))
bias_var = function(N=2,order = 1,M=10000,dx=1/1000){
M     = 1000
dx    = 1/100
x_lat = seq(-1,1,dx)
N_dx  = length(x_lat)
g_bar = rep(0,N_dx)
G_D = matrix(0,M,N_dx)
for (i in 1:M) {
res_data  = dgp(N,f)
res_model = lm(y~poly(x,order),data=res_data)
g_D       =  predict(res_model,data.frame(x=x_lat))
g_bar     =  g_bar+g_D
G_D[i,]   = g_D
}
g_bar = g_bar/M
phi_x = 0.5
bias2 = sum((g_bar-f(x_lat))[-N_dx]^2*phi_x*dx)
# Calculate the variance for an appropriate H.
# This integration involves two steps.
ones = matrix(1,M,1)
var_x = colSums((G_D-ones %*% g_bar)^2)/M   # step 1
var  = sum(var_x[-N_dx]*phi_x*dx)           # step2
ret = list(bias2=bias2,var=var,both=bias2+var)
return(ret)
}
rbind(bias_var(N=5,order = 1),
bias_var(N=5,order =1),
bias_var(N=5,order = 1))
# Write a function that generates a data set of size N
# with pattern f. Return a list of predictors (x) and responses (y).
dgp = function(N,f,sig)
{
x = runif(N,-1,1)
e = sqrt(sig2)*rnorm(N,0,1)
y = f(x)+e
return(list(x=x,y=y))
}
res_data = dgp(2,f,sig2)
# Write a function that generates a data set of size N
# with pattern f. Return a list of predictors (x) and responses (y).
dgp = function(N,f,sig2)
{
x = runif(N,-1,1)
e = sqrt(sig2)*rnorm(N,0,1)
y = f(x)+e
return(list(x=x,y=y))
}
res_data = dgp(2,f,sig2)
res_data = dgp(2,f,sig2=0)
# Plot a single realization of the data and overlay the target function:
plot(res_data,pch=16,cex=2,col="blue",xlim = c(-1,1), ylim = c(-1,1))
xx = seq(-1,1,1/100)
lines(f(xx)~xx,col='grey')
bias_var = function(N=2,order = 1,sig2=0,M=10000,dx=1/1000){
M     = 1000
dx    = 1/100
x_lat = seq(-1,1,dx)
N_dx  = length(x_lat)
g_bar = rep(0,N_dx)
G_D = matrix(0,M,N_dx)
for (i in 1:M) {
res_data  = dgp(N,f)
res_model = lm(y~poly(x,order),data=res_data)
g_D       =  predict(res_model,data.frame(x=x_lat))
g_bar     =  g_bar+g_D
G_D[i,]   = g_D
}
g_bar = g_bar/M
phi_x = 0.5
bias2 = sum((g_bar-f(x_lat))[-N_dx]^2*phi_x*dx)
# Calculate the variance for an appropriate H.
# This integration involves two steps.
ones = matrix(1,M,1)
var_x = colSums((G_D-ones %*% g_bar)^2)/M   # step 1
var  = sum(var_x[-N_dx]*phi_x*dx)           # step2
ret = list(bias2=bias2,var=var,both=bias2+var)
return(ret)
}
rbind(bias_var(N=5,order = 1,sig2=0),
bias_var(N=5,order = 1,sig2=0.1),
bias_var(N=5,order =1,sig2=0.5),
bias_var(N=5,order = 1,sig2=1))
bias_var = function(N=2,order = 1,sig2=0,M=10000,dx=1/1000){
M     = 1000
dx    = 1/100
x_lat = seq(-1,1,dx)
N_dx  = length(x_lat)
g_bar = rep(0,N_dx)
G_D = matrix(0,M,N_dx)
for (i in 1:M) {
res_data  = dgp(N,f,sig2)
res_model = lm(y~poly(x,order),data=res_data)
g_D       =  predict(res_model,data.frame(x=x_lat))
g_bar     =  g_bar+g_D
G_D[i,]   = g_D
}
g_bar = g_bar/M
phi_x = 0.5
bias2 = sum((g_bar-f(x_lat))[-N_dx]^2*phi_x*dx)
# Calculate the variance for an appropriate H.
# This integration involves two steps.
ones = matrix(1,M,1)
var_x = colSums((G_D-ones %*% g_bar)^2)/M   # step 1
var  = sum(var_x[-N_dx]*phi_x*dx)           # step2
ret = list(bias2=bias2,var=var,both=bias2+var)
return(ret)
}
rbind(bias_var(N=5,order = 1,sig2=0),
bias_var(N=5,order = 1,sig2=0.1),
bias_var(N=5,order =1,sig2=0.5),
bias_var(N=5,order = 1,sig2=1))
rbind(bias_var(N=5,order = 2,sig2=0),
bias_var(N=5,order = 2,sig2=0.1),
bias_var(N=5,order =2,sig2=0.5),
bias_var(N=5,order = 2,sig2=1))
# Set up a target function/pattern:
f = function(x){sin(pi*x)}
# Write a function that generates a data set of size N
# with pattern f. Return a list of predictors (x) and responses (y).
dgp = function(N,f,sig2)
{
x = runif(N,-1,1)
e = sqrt(sig2)*rnorm(N,0,1)
y = f(x)+e
return(list(x=x,y=y))
}
res_data = dgp(2,f,sig2=1)
# Plot a single realization of the data and overlay the target function:
plot(res_data,pch=16,cex=2,col="blue",xlim = c(-1,1), ylim = c(-1,1))
xx = seq(-1,1,1/100)
lines(f(xx)~xx,col='grey')
rbind(bias_var(N=5,order = 1,sig2=0),
bias_var(N=5,order = 1,sig2=0.1),
bias_var(N=5,order =1,sig2=0.5),
bias_var(N=5,order = 1,sig2=1))
errors = rep(0,M)
bias_var = function(N=2,order = 1,sig2=0,M=10000,dx=1/1000){
M     = 1000
dx    = 1/100
x_lat = seq(-1,1,dx)
N_dx  = length(x_lat)
g_bar = rep(0,N_dx)
G_D = matrix(0,M,N_dx)
errors = rep(0,M)
for (i in 1:M) {
res_data  = dgp(N,f,sig2)
res_model = lm(y~poly(x,order),data=res_data)
g_D       =  predict(res_model,data.frame(x=x_lat))
g_bar     =  g_bar+g_D
G_D[i,]   = g_D
dat_oos =dgp(N,f,sig2)
yhat_oos = predict(res_model,data.frame(x=dat_oos$x))
errors[i] = mean((yhat_oss-dat_oss)^2)
}
g_bar = g_bar/M
test_error = mean(errors)
phi_x = 0.5
bias2 = sum((g_bar-f(x_lat))[-N_dx]^2*phi_x*dx)
# Calculate the variance for an appropriate H.
# This integration involves two steps.
ones = matrix(1,M,1)
var_x = colSums((G_D-ones %*% g_bar)^2)/M   # step 1
var  = sum(var_x[-N_dx]*phi_x*dx)           # step2
ret = list(bias2=bias2,var=var,both=bias2+var,test_error=test_error)
return(ret)
}
rbind(bias_var(N=5,order = 1,sig2=0),
bias_var(N=5,order = 1,sig2=0.1),
bias_var(N=5,order =1,sig2=0.5),
bias_var(N=5,order = 1,sig2=1))
bias_var = function(N=2,order = 1,sig2=0,M=10000,dx=1/1000){
M     = 1000
dx    = 1/100
x_lat = seq(-1,1,dx)
N_dx  = length(x_lat)
g_bar = rep(0,N_dx)
G_D = matrix(0,M,N_dx)
errors = rep(0,M)
for (i in 1:M) {
res_data  = dgp(N,f,sig2)
res_model = lm(y~poly(x,order),data=res_data)
g_D       =  predict(res_model,data.frame(x=x_lat))
g_bar     =  g_bar+g_D
G_D[i,]   = g_D
dat_oos =dgp(N,f,sig2)
yhat_oos = predict(res_model,data.frame(x=dat_oos$x))
errors[i] = mean((yhat_oss-dat_oos)^2)
}
g_bar = g_bar/M
test_error = mean(errors)
phi_x = 0.5
bias2 = sum((g_bar-f(x_lat))[-N_dx]^2*phi_x*dx)
# Calculate the variance for an appropriate H.
# This integration involves two steps.
ones = matrix(1,M,1)
var_x = colSums((G_D-ones %*% g_bar)^2)/M   # step 1
var  = sum(var_x[-N_dx]*phi_x*dx)           # step2
ret = list(bias2=bias2,var=var,both=bias2+var,test_error=test_error)
return(ret)
}
rbind(bias_var(N=5,order = 1,sig2=0),
bias_var(N=5,order = 1,sig2=0.1),
bias_var(N=5,order =1,sig2=0.5),
bias_var(N=5,order = 1,sig2=1))
bias_var = function(N=2,order = 1,sig2=0,M=10000,dx=1/1000){
M     = 1000
dx    = 1/100
x_lat = seq(-1,1,dx)
N_dx  = length(x_lat)
g_bar = rep(0,N_dx)
G_D = matrix(0,M,N_dx)
errors = rep(0,M)
for (i in 1:M) {
res_data  = dgp(N,f,sig2)
res_model = lm(y~poly(x,order),data=res_data)
g_D       =  predict(res_model,data.frame(x=x_lat))
g_bar     =  g_bar+g_D
G_D[i,]   = g_D
dat_oos =dgp(N,f,sig2)
yhat_oos = predict(res_model,data.frame(x=dat_oos$x))
errors[i] = mean((yhat_oos-dat_oos)^2)
}
g_bar = g_bar/M
test_error = mean(errors)
phi_x = 0.5
bias2 = sum((g_bar-f(x_lat))[-N_dx]^2*phi_x*dx)
# Calculate the variance for an appropriate H.
# This integration involves two steps.
ones = matrix(1,M,1)
var_x = colSums((G_D-ones %*% g_bar)^2)/M   # step 1
var  = sum(var_x[-N_dx]*phi_x*dx)           # step2
ret = list(bias2=bias2,var=var,both=bias2+var,test_error=test_error)
return(ret)
}
rbind(bias_var(N=5,order = 1,sig2=0),
bias_var(N=5,order = 1,sig2=0.1),
bias_var(N=5,order =1,sig2=0.5),
bias_var(N=5,order = 1,sig2=1))
bias_var = function(N=2,order = 1,sig2=0,M=10000,dx=1/1000){
M     = 1000
dx    = 1/100
x_lat = seq(-1,1,dx)
N_dx  = length(x_lat)
g_bar = rep(0,N_dx)
G_D = matrix(0,M,N_dx)
errors = rep(0,M)
for (i in 1:M) {
res_data  = dgp(N,f,sig2)
res_model = lm(y~poly(x,order),data=res_data)
g_D       =  predict(res_model,data.frame(x=x_lat))
g_bar     =  g_bar+g_D
G_D[i,]   = g_D
dat_oos   = dgp(N,f,sig2)
yhat_oos = predict(res_model,data.frame(x=dat_oos$x))
errors[i] = mean((yhat_oos-dat_oos$y)^2)
}
g_bar = g_bar/M
test_error = mean(errors)
phi_x = 0.5
bias2 = sum((g_bar-f(x_lat))[-N_dx]^2*phi_x*dx)
# Calculate the variance for an appropriate H.
# This integration involves two steps.
ones = matrix(1,M,1)
var_x = colSums((G_D-ones %*% g_bar)^2)/M   # step 1
var  = sum(var_x[-N_dx]*phi_x*dx)           # step2
ret = list(bias2=bias2,var=var,both=bias2+var,test_error=test_error)
return(ret)
}
rbind(bias_var(N=5,order = 1,sig2=0),
bias_var(N=5,order = 1,sig2=0.1),
bias_var(N=5,order =1,sig2=0.5),
bias_var(N=5,order = 1,sig2=1))
data("iris")
head(data)
head(iris)
iris_target = as.integer(factor(iris$Species))-1
iris_feat = as.matrix(iris[,1:4])
iris_features = as.matrix(iris[,1:4])
ind <- sample(1:2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
# Determine sample size
set.seed(123)
ind <- sample(1:2, nrow(iris), replace=TRUE, prob=c(0.67, 0.33))
# Split features
x_train <- iris_features[ind==1, ]
x_test <- iris_features[ind==2, ]
# Split target
y_train <- iris_target[ind==1]
y_test <- iris_target[ind==2]
x_train <-  scale(x_train)
attr(x_train, "scaled:center")
x_test <- scale(x_test, center = attr(x_train, "scaled:center"),
scale = attr(x_train, "scaled:scale"))
y_train <- to_categorical(y_train)
y_train
as.factor(y_train)
str(y_train)
y_train <- as.factor(y_train)
y_test_original <- y_test
y_test <- as.factor(y_test)
model <- keras::keras_model_sequential()
library(keras)
model <- keras::keras_model_sequential()
packageVersion("keras")
tf$constant("djwn")
library(tensorflow)
tf$constant("djwn")
install.packages("remotes")
install.packages("remotes")
2
remotes::install_github(sprintf("rstudio/%s", c("reticulate", "tensorflow", "keras")))
reticulate::miniconda_uninstall() # start with a blank slate
reticulate::install_miniconda()
keras::install_keras()
keras::install_keras()
R.Version()
setwd("C:/Users/Administrator/Desktop/Masters in Statistical Science/Data Science for Industry/Quarto/GitHub_setup2")
VERSION()
version()
Rversion()
rversion()
cite()
citation()
The State of the Nation Address of the President of South Africa (SONA) is an annual event
---
title: "Welcome!"
115.84-95
+
+
2
+
2
**2
2*2
# Install all the required packages
install.packages("kableExtra")
# Install all the required packages
library(kableExtra)
iris2 <- head(iris)
kable(iris2, col.names = gsub("[.]", " ", names(iris)))
iris2 <- head(iris)
kable(iris2, col.names = gsub("[.]", " ", names(iris)),'html')
